!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/mathieu/repos/C/modules/array/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(DIR_BIN)	test/Makefile	/^$(DIR_BIN):$/;"	t
$(DIR_BIN)/main	test/Makefile	/^$(DIR_BIN)\/main: .\/src\/main.c ..\/build\/array.o .\/src\/person.c$/;"	t
$(DIR_BIN)/map_reduce	test/Makefile	/^$(DIR_BIN)\/map_reduce: .\/src\/map_reduce.c ..\/build\/array.o$/;"	t
$(DIR_BIN)/sort	test/Makefile	/^$(DIR_BIN)\/sort: .\/src\/sort.c ..\/build\/array.o .\/src\/person.c$/;"	t
$(DIR_BUILD)/array.o	Makefile	/^$(DIR_BUILD)\/array.o: $(SOURCES)$/;"	t
$(DIR_BUILD)/libarray.a	Makefile	/^$(DIR_BUILD)\/libarray.a: $(DIR_BUILD)\/array.o$/;"	t
$(DIR_LOG)	test/Makefile	/^$(DIR_LOG):$/;"	t
$(DIR_LOG)/main	test/Makefile	/^$(DIR_LOG)\/main: $(DIR_BIN)\/main$/;"	t
$(DIR_LOG)/map_reduce	test/Makefile	/^$(DIR_LOG)\/map_reduce: $(DIR_BIN)\/map_reduce$/;"	t
$(DIR_LOG)/sort	test/Makefile	/^$(DIR_LOG)\/sort: $(DIR_BIN)\/sort$/;"	t
ARRAY_REALLOC_COEF	src/array.h	/^#define ARRAY_REALLOC_COEF /;"	d
CC	Makefile	/^CC=gcc$/;"	m
CC	test/Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-W -Wall -ansi -pedantic -std=c18 -D_POSIX_C_SOURCE=200809L$/;"	m
CFLAGS	test/Makefile	/^CFLAGS=-W -Wall -ansi -pedantic -std=c18 -D_POSIX_C_SOURCE=200809L$/;"	m
CTAGS_DEP	Makefile	/^CTAGS_DEP=$(SOURCES)$/;"	m
DIR_BIN	test/Makefile	/^DIR_BIN=.\/bin$/;"	m
DIR_BUILD	Makefile	/^DIR_BUILD=.\/build$/;"	m
DIR_LOG	test/Makefile	/^DIR_LOG=.\/log$/;"	m
INIT_SIZE	test/src/main.c	/^#define INIT_SIZE /;"	d	file:
INIT_SIZE	test/src/sort.c	/^#define INIT_SIZE /;"	d	file:
LDFLAGS	Makefile	/^LDFLAGS=$/;"	m
LDFLAGS	test/Makefile	/^LDFLAGS=$/;"	m
PERSON_ADRESS_LEN	test/src/person.h	/^#define PERSON_ADRESS_LEN /;"	d
PERSON_NAME_LEN	test/src/person.h	/^#define PERSON_NAME_LEN /;"	d
SOURCES	Makefile	/^SOURCES=.\/src\/array.c .\/src\/array.h $/;"	m
_array_alloc	src/array.c	/^static array *_array_alloc(size_t size) {$/;"	f	typeref:typename:array *	file:
_array_realloc	src/array.c	/^static array *_array_realloc(array *a) {$/;"	f	typeref:typename:array *	file:
_next_non_null	src/array.c	/^size_t _next_non_null(array *a, size_t idx) {$/;"	f	typeref:typename:size_t
adress	test/src/person.h	/^	char adress[PERSON_ADRESS_LEN];$/;"	m	struct:person	typeref:typename:char[]
age	test/src/person.h	/^	int age;$/;"	m	struct:person	typeref:typename:int
all	Makefile	/^all: test$/;"	t
all	test/Makefile	/^all: dirs execs tests$/;"	t
array	src/array.h	/^typedef struct array {$/;"	s
array	src/array.h	/^} array;$/;"	t	typeref:struct:array
array_add_at	src/array.c	/^array *array_add_at(array *a, void *d, size_t idx) {$/;"	f	typeref:typename:array *
array_add_keep_sorted	src/array.c	/^array *array_add_keep_sorted(array *a, void *d) {$/;"	f	typeref:typename:array *
array_append	src/array.c	/^array *array_append(array *a, void *d) {$/;"	f	typeref:typename:array *
array_concat	src/array.c	/^array *array_concat(array *res, array *add) {$/;"	f	typeref:typename:array *
array_copy	src/array.c	/^array *array_copy(array *a) {$/;"	f	typeref:typename:array *
array_find	src/array.c	/^void *array_find(array *a, void *search) {$/;"	f	typeref:typename:void *
array_free	src/array.c	/^void array_free(array *a, int with_data) {$/;"	f	typeref:typename:void
array_get	src/array.c	/^void *array_get(array *a, size_t i) {$/;"	f	typeref:typename:void *
array_map	src/array.c	/^void array_map(array *a, void (*map)(void *)) {$/;"	f	typeref:typename:void
array_new	src/array.c	/^array *array_new(size_t init_size) {$/;"	f	typeref:typename:array *
array_print	src/array.c	/^void array_print(array *a) {$/;"	f	typeref:typename:void
array_reduce	src/array.c	/^void array_reduce(array *a, void *res, void (*reduce)(void *, void *)) {$/;"	f	typeref:typename:void
array_remove	src/array.c	/^void array_remove(array *a, void *p, int keep_null) {$/;"	f	typeref:typename:void
array_remove_idx	src/array.c	/^void array_remove_idx(array *a, size_t idx, int keep_null) {$/;"	f	typeref:typename:void
array_remove_nulls	src/array.c	/^array *array_remove_nulls(array *a) {$/;"	f	typeref:typename:array *
array_resize	src/array.c	/^array *array_resize(array *a, size_t newsize) {$/;"	f	typeref:typename:array *
array_set	src/array.c	/^void array_set(array *a, size_t i, void *value) {$/;"	f	typeref:typename:void
array_set_cmp	src/array.c	/^void array_set_cmp(array *a, int (*cmp_data)(void *, void *)) {$/;"	f	typeref:typename:void
array_set_free	src/array.c	/^void array_set_free(array *a, void (*free_data)(void *)) {$/;"	f	typeref:typename:void
array_set_print	src/array.c	/^void array_set_print(array *a, void (*print_data)(void *)) {$/;"	f	typeref:typename:void
array_set_tos	src/array.c	/^void array_set_tos(array *a, void (*tos_data)(void *)) {$/;"	f	typeref:typename:void
array_sort	src/array.c	/^void array_sort(array *res) {$/;"	f	typeref:typename:void
array_swap	src/array.c	/^void array_swap(array *a, void *d1, void *d2) {$/;"	f	typeref:typename:void
array_swap_idx	src/array.c	/^void array_swap_idx(array *a, size_t idx1, size_t idx2) {$/;"	f	typeref:typename:void
clean	Makefile	/^clean:$/;"	t
clean	test/Makefile	/^clean:$/;"	t
cmp	src/array.h	/^	int (*cmp)(void *, void *);$/;"	m	struct:array	typeref:typename:int (*)(void *,void *)
data	src/array.h	/^	void **data;$/;"	m	struct:array	typeref:typename:void **
dirs	Makefile	/^dirs:$/;"	t
dirs	test/Makefile	/^dirs: $(DIR_LOG) $(DIR_BIN)$/;"	t
execs	test/Makefile	/^execs: $(DIR_BIN)\/main $(DIR_BIN)\/map_reduce $(DIR_BIN)\/sort$/;"	t
free	src/array.h	/^	void (*free)(void *);$/;"	m	struct:array	typeref:typename:void (*)(void *)
id	test/src/person.h	/^	int id;$/;"	m	struct:person	typeref:typename:int
int_cmp	test/src/map_reduce.c	/^int int_cmp(int *a, int *b) {$/;"	f	typeref:typename:int
int_copy	test/src/map_reduce.c	/^int *int_copy(int *a) {$/;"	f	typeref:typename:int *
int_free	test/src/map_reduce.c	/^void int_free(int *a) {$/;"	f	typeref:typename:void
int_print	test/src/map_reduce.c	/^void int_print(int *a) {$/;"	f	typeref:typename:void
main	test/src/main.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	test/src/map_reduce.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	test/src/sort.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
map	test/src/map_reduce.c	/^void map(int *a) {$/;"	f	typeref:typename:void
n	src/array.h	/^	size_t n;$/;"	m	struct:array	typeref:typename:size_t
name	test/src/person.h	/^	char name[PERSON_NAME_LEN];$/;"	m	struct:person	typeref:typename:char[]
p_cast	test/src/person.h	/^#define p_cast(/;"	d
person	test/src/person.h	/^typedef struct person {$/;"	s
person	test/src/person.h	/^} person;$/;"	t	typeref:struct:person
person_cmp	test/src/person.c	/^int person_cmp(person *p1, person *p2) {$/;"	f	typeref:typename:int
person_copy	test/src/person.c	/^person *person_copy(person *p) {$/;"	f	typeref:typename:person *
person_free	test/src/person.c	/^void person_free(person *p) {$/;"	f	typeref:typename:void
person_new	test/src/person.c	/^person *person_new(int id, int age, char *name, char *adress) {$/;"	f	typeref:typename:person *
person_print	test/src/person.c	/^void person_print(person *p) {$/;"	f	typeref:typename:void
person_to_json	test/src/person.c	/^void person_to_json(char *dest, person *p) {$/;"	f	typeref:typename:void
print	src/array.h	/^	void (*print)(void *);$/;"	m	struct:array	typeref:typename:void (*)(void *)
reduce	test/src/map_reduce.c	/^void reduce(int *res, int *a) {$/;"	f	typeref:typename:void
size	src/array.h	/^	size_t size;$/;"	m	struct:array	typeref:typename:size_t
test	Makefile	/^test: $(DIR_BUILD)\/libarray.a$/;"	t
tests	test/Makefile	/^tests: $(DIR_LOG)\/main $(DIR_LOG)\/map_reduce $(DIR_LOG)\/sort$/;"	t
tos	src/array.h	/^	void (*tos)(void *);$/;"	m	struct:array	typeref:typename:void (*)(void *)
