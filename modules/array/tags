ARRAY_DECLARE	src/array.h	/^#define ARRAY_DECLARE(type, name) typedef struct {/
ARRAY_DECLARE	src/array.h	/^ARRAY_DECLARE(char, array);$/
ARRAY_FREE	src/array.h	/^#define ARRAY_FREE(a) free(a->items); free(a)$/
ARRAY_GET	src/array.h	/^#define ARRAY_GET(a, i) ARRAY_GET_AS(a, i, void)$/
ARRAY_GET_AS	src/array.h	/^#define ARRAY_GET_AS(a, i, type) (type *)(((char */
ARRAY_H	src/array.h	6
ARRAY_MAP	src/array.h	/^#define ARRAY_MAP(a, f) FOR(i, 0, a->capacity, f((/
ARRAY_MAP1	src/array.h	/^#define ARRAY_MAP1(a, f, arg) FOR(i, 0, a->capacit/
ARRAY_SET	src/array.h	/^#define ARRAY_SET(a, i, v) memcpy(((char *)a->item/
array_new	src/array.h	/^array *array_new(size_t capacity, size_t size_of_i/
array_scale	src/array.h	/^array *array_scale(void *a, size_t new_size_of_ite/
