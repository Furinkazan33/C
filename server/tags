!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/mathieu/repos/C/server/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
BUF_LEN	./src/test/fifo.c	/^#define BUF_LEN /;"	d	file:
BUF_LINES_ALLOC	./src/include/tb.h	/^#define BUF_LINES_ALLOC /;"	d
BUF_LINE_ALLOC	./src/include/tb.h	/^#define BUF_LINE_ALLOC /;"	d
BUF_LINE_CONTENT_ALLOC	./src/include/tb.h	/^#define BUF_LINE_CONTENT_ALLOC /;"	d
BUF_NAME_LEN	./src/include/tb.h	/^#define BUF_NAME_LEN /;"	d
BUF_PATH_LEN	./src/include/tb.h	/^#define BUF_PATH_LEN /;"	d
CHAR	./src/include/database.h	/^	INT = 0, 	DOUBLE, 	FLOAT, 		CHAR, 		STRING,$/;"	e	enum:type
CHAR_EOM	./src/include/fifo.h	/^#define CHAR_EOM /;"	d
CHAR_EOM	./src/test/fifo.c	/^#define CHAR_EOM /;"	d	file:
CONFIG_names	./src/include/config.h	/^static char CONFIG_names[CONF_N][CONF_STR_LEN] = {$/;"	v	typeref:typename:char[][]
CONFIG_values	./src/include/config.h	/^static char CONFIG_values[CONF_N][CONF_STR_LEN] = {$/;"	v	typeref:typename:char[][]
CONF_N	./src/include/config.h	/^#define CONF_N /;"	d
CONF_STR_LEN	./src/include/config.h	/^#define CONF_STR_LEN /;"	d
DB_COMMENT_LEN	./src/include/database.h	/^#define DB_COMMENT_LEN /;"	d
DB_MAX_ROWS	./src/include/database.h	/^#define DB_MAX_ROWS /;"	d
DB_NAME_LEN	./src/include/database.h	/^#define DB_NAME_LEN /;"	d
DB_N_COLUMNS	./src/include/database.h	/^#define DB_N_COLUMNS /;"	d
DOUBLE	./src/include/database.h	/^	INT = 0, 	DOUBLE, 	FLOAT, 		CHAR, 		STRING,$/;"	e	enum:type
FIFO_BUF_LEN	./src/include/fifo.h	/^#define FIFO_BUF_LEN /;"	d
FLOAT	./src/include/database.h	/^	INT = 0, 	DOUBLE, 	FLOAT, 		CHAR, 		STRING,$/;"	e	enum:type
INT	./src/include/database.h	/^	INT = 0, 	DOUBLE, 	FLOAT, 		CHAR, 		STRING,$/;"	e	enum:type
MESS_LEN	./src/test/fifo.c	/^#define MESS_LEN /;"	d	file:
STRING	./src/include/database.h	/^	INT = 0, 	DOUBLE, 	FLOAT, 		CHAR, 		STRING,$/;"	e	enum:type
col	./src/include/database.h	/^typedef struct col {$/;"	s
col	./src/include/database.h	/^} col;$/;"	t	typeref:struct:col
cols	./src/include/database.h	/^	col *cols[DB_N_COLUMNS];$/;"	m	struct:database	typeref:typename:col * []
config_print	./src/include/config.h	/^void config_print() {$/;"	f	typeref:typename:void
config_read	./src/include/config.h	/^int config_read(char *path) {$/;"	f	typeref:typename:int
config_write	./src/include/config.h	/^int config_write() {$/;"	f	typeref:typename:int
content	./src/include/tb.h	/^	char *content;$/;"	m	struct:line	typeref:typename:char *
data	./src/include/database.h	/^	void *data[DB_MAX_ROWS][DB_N_COLUMNS];$/;"	m	struct:database	typeref:typename:void * [][]
database	./src/include/database.h	/^typedef struct database {$/;"	s
database	./src/include/database.h	/^} database;$/;"	t	typeref:struct:database
db_add_col	./src/include/database.h	/^void db_add_col(database *db, col *c) {$/;"	f	typeref:typename:void
db_delete	./src/include/database.h	/^void db_delete(database *db, int n) {$/;"	f	typeref:typename:void
db_delete_all	./src/include/database.h	/^void db_delete_all(database *db) {$/;"	f	typeref:typename:void
db_free	./src/include/database.h	/^void db_free(database *db) {$/;"	f	typeref:typename:void
db_free_cols	./src/include/database.h	/^void db_free_cols(database *db) {$/;"	f	typeref:typename:void
db_free_data	./src/include/database.h	/^void db_free_data(database *db, int n) {$/;"	f	typeref:typename:void
db_insert	./src/include/database.h	/^void db_insert(database *db, void *row[DB_N_COLUMNS]) {$/;"	f	typeref:typename:void
db_new	./src/include/database.h	/^database *db_new(char *name, char *desc) {$/;"	f	typeref:typename:database *
db_new_col	./src/include/database.h	/^col *db_new_col(char *name, char *desc, const type *t) {$/;"	f	typeref:typename:col *
db_print	./src/include/database.h	/^void db_print(database *db) {$/;"	f	typeref:typename:void
db_print_desc	./src/include/database.h	/^void db_print_desc(database *db) {$/;"	f	typeref:typename:void
db_print_row	./src/include/database.h	/^void db_print_row(database *db, int n) {$/;"	f	typeref:typename:void
db_print_rows	./src/include/database.h	/^void db_print_rows(database *db) {$/;"	f	typeref:typename:void
db_print_stats	./src/include/database.h	/^void db_print_stats(database *db) {$/;"	f	typeref:typename:void
db_print_types	./src/include/database.h	/^void db_print_types(database *db) {$/;"	f	typeref:typename:void
db_t_char	./src/include/database.h	/^const type db_t_char = CHAR;$/;"	v	typeref:typename:const type
db_t_double	./src/include/database.h	/^const type db_t_double = DOUBLE;$/;"	v	typeref:typename:const type
db_t_float	./src/include/database.h	/^const type db_t_float = FLOAT;$/;"	v	typeref:typename:const type
db_t_int	./src/include/database.h	/^const type db_t_int = INT;$/;"	v	typeref:typename:const type
db_t_string	./src/include/database.h	/^const type db_t_string = STRING;$/;"	v	typeref:typename:const type
desc	./src/include/database.h	/^	char desc[DB_COMMENT_LEN];$/;"	m	struct:col	typeref:typename:char[]
desc	./src/include/database.h	/^	char desc[DB_COMMENT_LEN];$/;"	m	struct:database	typeref:typename:char[]
fifo_read	./src/include/fifo.h	/^static int fifo_read(int fd, char *message, int max_len, int (*treat)(char *)) {$/;"	f	typeref:typename:int
filepath	./src/include/tb.h	/^	char filepath[BUF_PATH_LEN];$/;"	m	struct:txt_buf	typeref:typename:char[]
line	./src/include/tb.h	/^typedef struct line {$/;"	s
line	./src/include/tb.h	/^} line;$/;"	t	typeref:struct:line
lines	./src/include/tb.h	/^	line **lines;$/;"	m	struct:txt_buf	typeref:typename:line **
main	./src/main.c	/^int main(void) {$/;"	f	typeref:typename:int
main	./src/test/config.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	./src/test/fifo.c	/^int main(void) {$/;"	f	typeref:typename:int
main	./src/test/tb.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
mess_treat	./src/test/fifo.c	/^int mess_treat(char *message) {$/;"	f	typeref:typename:int
n	./src/include/tb.h	/^	size_t n;$/;"	m	struct:txt_buf	typeref:typename:size_t
n_cols	./src/include/database.h	/^	int n_cols;$/;"	m	struct:database	typeref:typename:int
n_rows	./src/include/database.h	/^	int n_rows;$/;"	m	struct:database	typeref:typename:int
name	./src/include/database.h	/^	char name[DB_NAME_LEN];$/;"	m	struct:col	typeref:typename:char[]
name	./src/include/database.h	/^	char name[DB_NAME_LEN];$/;"	m	struct:database	typeref:typename:char[]
name	./src/include/tb.h	/^	char name[BUF_NAME_LEN];$/;"	m	struct:txt_buf	typeref:typename:char[]
size	./src/include/tb.h	/^	size_t size;$/;"	m	struct:line	typeref:typename:size_t
size	./src/include/tb.h	/^	size_t size;$/;"	m	struct:txt_buf	typeref:typename:size_t
str_rpl	./src/include/str.h	/^char *str_rpl(char *src, char *pattern, char *rpl) {$/;"	f	typeref:typename:char *
tb	./src/include/tb.h	/^typedef txt_buf tb;$/;"	t	typeref:typename:txt_buf
tb_alloc_line	./src/include/tb.h	/^line *tb_alloc_line(line *dest, size_t min) {$/;"	f	typeref:typename:line *
tb_alloc_lines	./src/include/tb.h	/^line **tb_alloc_lines(tb *buf) {$/;"	f	typeref:typename:line **
tb_free	./src/include/tb.h	/^void tb_free(tb *buf) {$/;"	f	typeref:typename:void
tb_load	./src/include/tb.h	/^int tb_load(tb *buf) {$/;"	f	typeref:typename:int
tb_new	./src/include/tb.h	/^tb *tb_new(char *filepath, char *name) {$/;"	f	typeref:typename:tb *
tb_readline	./src/include/tb.h	/^line *tb_readline(line *dest, FILE *f, int *n_read) {$/;"	f	typeref:typename:line *
tb_save	./src/include/tb.h	/^int tb_save(tb *buf) {$/;"	f	typeref:typename:int
txt_buf	./src/include/tb.h	/^typedef struct txt_buf {$/;"	s
txt_buf	./src/include/tb.h	/^} txt_buf;$/;"	t	typeref:struct:txt_buf
type	./src/include/database.h	/^	const type *type;$/;"	m	struct:col	typeref:typename:const type *
type	./src/include/database.h	/^typedef enum type {$/;"	g
type	./src/include/database.h	/^} type;$/;"	t	typeref:enum:type
type	./src/include/tb.h	/^	int type;$/;"	m	struct:line	typeref:typename:int
type_to_s	./src/include/database.h	/^const char *type_to_s[] = {$/;"	v	typeref:typename:const char * []
usage	./src/include/usage.h	/^static void usage(int argc, char **argv, char *mess) {$/;"	f	typeref:typename:void
usage	./src/test/config.c	/^void usage(char *exec) {$/;"	f	typeref:typename:void
