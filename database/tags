!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/mathieu/C/database/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
PARRAY_INIT_ALLOC	src/extern/parray.h	/^#define PARRAY_INIT_ALLOC /;"	d
PARRAY_REALLOC_COEF	src/extern/parray.h	/^#define PARRAY_REALLOC_COEF /;"	d
__anon486704a60108	src/extern/parray.h	/^typedef struct {$/;"	s
adress	src/database.h	/^	char adress[256];$/;"	m	struct:person	typeref:typename:char[256]
capacity	src/extern/parray.h	/^	size_t capacity;$/;"	m	struct:__anon486704a60108	typeref:typename:size_t
cities	src/database.h	/^static parray *cities;$/;"	v	typeref:typename:parray *
city	src/database.h	/^	int city;$/;"	m	struct:person	typeref:typename:int
city	src/database.h	/^typedef struct city {$/;"	s
city	src/database.h	/^} city;$/;"	t	typeref:struct:city
city_new	src/database.h	/^city *city_new(int id, int country, char *name, int population) {$/;"	f	typeref:typename:city *
count	src/extern/parray.h	/^	size_t count;$/;"	m	struct:__anon486704a60108	typeref:typename:size_t
countries	src/database.h	/^static parray *countries;$/;"	v	typeref:typename:parray *
country	src/database.h	/^	int country;$/;"	m	struct:city	typeref:typename:int
country	src/database.h	/^typedef struct country {$/;"	s
country	src/database.h	/^} country;$/;"	t	typeref:struct:country
country_new	src/database.h	/^country *country_new(int id, char *name) {$/;"	f	typeref:typename:country *
id	src/database.h	/^	int id;$/;"	m	struct:city	typeref:typename:int
id	src/database.h	/^	int id;$/;"	m	struct:country	typeref:typename:int
id	src/database.h	/^	int id;$/;"	m	struct:person	typeref:typename:int
items	src/extern/parray.h	/^	void **items;$/;"	m	struct:__anon486704a60108	typeref:typename:void **
load_cities	src/database.h	/^void load_cities() {$/;"	f	typeref:typename:void
load_counties	src/database.h	/^void load_counties() {$/;"	f	typeref:typename:void
load_persons	src/database.h	/^void load_persons() {$/;"	f	typeref:typename:void
main	src/test/test.c	/^int main() {$/;"	f	typeref:typename:int
name	src/database.h	/^	char name[64];$/;"	m	struct:city	typeref:typename:char[64]
name	src/database.h	/^	char name[64];$/;"	m	struct:country	typeref:typename:char[64]
name	src/database.h	/^	char name[64];$/;"	m	struct:person	typeref:typename:char[64]
parray	src/extern/parray.h	/^} parray;$/;"	t	typeref:struct:__anon486704a60108
parray_append	src/extern/parray.c	/^parray *parray_append(void *a, void *item) {$/;"	f	typeref:typename:parray *
parray_free	src/extern/parray.c	/^void parray_free(void *a, void (*custom_free)(void *)) {$/;"	f	typeref:typename:void
parray_map	src/extern/parray.c	/^void parray_map(void *a, void(*map)(void *)) {$/;"	f	typeref:typename:void
parray_map1	src/extern/parray.c	/^void parray_map1(void *a, void(*map)(void *, void *), void *arg) {$/;"	f	typeref:typename:void
parray_new	src/extern/parray.c	/^parray *parray_new(size_t capacity) {$/;"	f	typeref:typename:parray *
person	src/database.h	/^typedef struct person {$/;"	s
person	src/database.h	/^} person;$/;"	t	typeref:struct:person
person_get_city	src/database.h	/^city *person_get_city(person *p) {$/;"	f	typeref:typename:city *
person_new	src/database.h	/^person *person_new(int id, int city, char *name, char *adress) {$/;"	f	typeref:typename:person *
persons	src/database.h	/^static parray *persons;$/;"	v	typeref:typename:parray *
population	src/database.h	/^	int population;$/;"	m	struct:city	typeref:typename:int
