!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/mathieu/repos/C/server/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
./bin/server	Makefile	/^.\/bin\/server: .\/src\/server.c$/;"	t
ARRAY_REALLOC_COEF	modules/include/array.h	/^#define ARRAY_REALLOC_COEF /;"	d
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-W -Wall -ansi -pedantic -std=c18 -D_POSIX_C_SOURCE=200809L$/;"	m
CHAR	src/database.h	/^	INT = 0, 	DOUBLE, 	FLOAT, 		CHAR, 		STRING,$/;"	e	enum:type
CLI_BUF_SIZE	src/client.c	/^#define CLI_BUF_SIZE /;"	d	file:
CLI_MESS_SIZE	src/client.c	/^#define CLI_MESS_SIZE /;"	d	file:
DB_COMMENT_LEN	src/database.h	/^#define DB_COMMENT_LEN /;"	d
DB_MAX_ROWS	src/database.h	/^#define DB_MAX_ROWS /;"	d
DB_NAME_LEN	src/database.h	/^#define DB_NAME_LEN /;"	d
DB_N_COLUMNS	src/database.h	/^#define DB_N_COLUMNS /;"	d
DOUBLE	src/database.h	/^	INT = 0, 	DOUBLE, 	FLOAT, 		CHAR, 		STRING,$/;"	e	enum:type
FB_RC_EOB	modules/include/fr.h	/^#define FB_RC_EOB /;"	d
FB_RC_EOF	modules/include/fr.h	/^#define FB_RC_EOF /;"	d
FB_RC_NOT_FINISHED	modules/include/fr.h	/^#define FB_RC_NOT_FINISHED /;"	d
FB_RC_READ_ERROR	modules/include/fr.h	/^#define FB_RC_READ_ERROR /;"	d
FB_RC_TOO_LONG	modules/include/fr.h	/^#define FB_RC_TOO_LONG /;"	d
FIFO_DATA_TYPE	modules/include/fifo.h	/^	#define FIFO_DATA_TYPE /;"	d
FLOAT	src/database.h	/^	INT = 0, 	DOUBLE, 	FLOAT, 		CHAR, 		STRING,$/;"	e	enum:type
FR_MAX_LINE_LEN	modules/include/fr.h	/^#define FR_MAX_LINE_LEN /;"	d
INC	Makefile	/^INC=\/usr\/local\/include$/;"	m
INT	src/database.h	/^	INT = 0, 	DOUBLE, 	FLOAT, 		CHAR, 		STRING,$/;"	e	enum:type
LDFLAGS	Makefile	/^LDFLAGS=$/;"	m
LIB	Makefile	/^LIB=\/usr\/local\/lib$/;"	m
SERV_BUF_SIZE	src/server.c	/^#define SERV_BUF_SIZE /;"	d	file:
SERV_MAX_CLI	src/server.c	/^#define SERV_MAX_CLI /;"	d	file:
SERV_MESS_SIZE	src/server.c	/^#define SERV_MESS_SIZE /;"	d	file:
SRC	Makefile	/^SRC=\/usr\/local\/src$/;"	m
STRING	src/database.h	/^	INT = 0, 	DOUBLE, 	FLOAT, 		CHAR, 		STRING,$/;"	e	enum:type
adm_handler	src/server.c	/^static int adm_handler(char *message, int fd) {$/;"	f	typeref:typename:int	file:
adm_quit	src/server.c	/^static int adm_quit = 0;$/;"	v	typeref:typename:int	file:
all	Makefile	/^all: .\/bin\/server$/;"	t
array	modules/include/array.h	/^typedef struct array {$/;"	s
array	modules/include/array.h	/^} array;$/;"	t	typeref:struct:array
clean	Makefile	/^clean: $/;"	t
col	src/database.h	/^typedef struct col {$/;"	s
col	src/database.h	/^} col;$/;"	t	typeref:struct:col
cols	src/database.h	/^	col *cols[DB_N_COLUMNS];$/;"	m	struct:database	typeref:typename:col * []
container	modules/include/fifo.h	/^typedef struct container {$/;"	s
container	modules/include/fifo.h	/^} container;$/;"	t	typeref:struct:container
data	modules/include/array.h	/^	void **data;$/;"	m	struct:array	typeref:typename:void **
data	modules/include/fifo.h	/^	FIFO_DATA_TYPE *data;$/;"	m	struct:container	typeref:typename:FIFO_DATA_TYPE *
data	src/database.h	/^	void *data[DB_MAX_ROWS][DB_N_COLUMNS];$/;"	m	struct:database	typeref:typename:void * [][]
database	src/database.h	/^typedef struct database {$/;"	s
database	src/database.h	/^} database;$/;"	t	typeref:struct:database
db_add_col	src/database.h	/^void db_add_col(database *db, col *c) {$/;"	f	typeref:typename:void
db_delete	src/database.h	/^void db_delete(database *db, int n) {$/;"	f	typeref:typename:void
db_delete_all	src/database.h	/^void db_delete_all(database *db) {$/;"	f	typeref:typename:void
db_free	src/database.h	/^void db_free(database *db) {$/;"	f	typeref:typename:void
db_free_cols	src/database.h	/^void db_free_cols(database *db) {$/;"	f	typeref:typename:void
db_free_data	src/database.h	/^void db_free_data(database *db, int n) {$/;"	f	typeref:typename:void
db_insert	src/database.h	/^void db_insert(database *db, void *row[DB_N_COLUMNS]) {$/;"	f	typeref:typename:void
db_new	src/database.h	/^database *db_new(char *name, char *desc) {$/;"	f	typeref:typename:database *
db_new_col	src/database.h	/^col *db_new_col(char *name, char *desc, const type *t) {$/;"	f	typeref:typename:col *
db_print	src/database.h	/^void db_print(database *db) {$/;"	f	typeref:typename:void
db_print_desc	src/database.h	/^void db_print_desc(database *db) {$/;"	f	typeref:typename:void
db_print_row	src/database.h	/^void db_print_row(database *db, int n) {$/;"	f	typeref:typename:void
db_print_rows	src/database.h	/^void db_print_rows(database *db) {$/;"	f	typeref:typename:void
db_print_stats	src/database.h	/^void db_print_stats(database *db) {$/;"	f	typeref:typename:void
db_print_types	src/database.h	/^void db_print_types(database *db) {$/;"	f	typeref:typename:void
db_t_char	src/database.h	/^const type db_t_char = CHAR;$/;"	v	typeref:typename:const type
db_t_double	src/database.h	/^const type db_t_double = DOUBLE;$/;"	v	typeref:typename:const type
db_t_float	src/database.h	/^const type db_t_float = FLOAT;$/;"	v	typeref:typename:const type
db_t_int	src/database.h	/^const type db_t_int = INT;$/;"	v	typeref:typename:const type
db_t_string	src/database.h	/^const type db_t_string = STRING;$/;"	v	typeref:typename:const type
desc	src/database.h	/^	char desc[DB_COMMENT_LEN];$/;"	m	struct:col	typeref:typename:char[]
desc	src/database.h	/^	char desc[DB_COMMENT_LEN];$/;"	m	struct:database	typeref:typename:char[]
end	modules/include/str.h	/^	char *end;$/;"	m	struct:str	typeref:typename:char *
fifo	modules/include/fifo.h	/^typedef struct fifo {$/;"	s
fifo	modules/include/fifo.h	/^} fifo;$/;"	t	typeref:struct:fifo
head	modules/include/fifo.h	/^	container *head;$/;"	m	struct:fifo	typeref:typename:container *
host	config/config.json	/^	"host":	"localhost",$/;"	s
main	src/client.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	src/server.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
max_clients	config/config.json	/^	"max_clients":	256$/;"	n
mess_treat	src/client.c	/^int mess_treat(char *message, int fd) {$/;"	f	typeref:typename:int
n	modules/include/array.h	/^	size_t n;$/;"	m	struct:array	typeref:typename:size_t
n	modules/include/fifo.h	/^	size_t n;$/;"	m	struct:fifo	typeref:typename:size_t
n_cols	src/database.h	/^	int n_cols;$/;"	m	struct:database	typeref:typename:int
n_rows	src/database.h	/^	int n_rows;$/;"	m	struct:database	typeref:typename:int
name	config/config.json	/^	"name":	"server",$/;"	s
name	src/database.h	/^	char name[DB_NAME_LEN];$/;"	m	struct:col	typeref:typename:char[]
name	src/database.h	/^	char name[DB_NAME_LEN];$/;"	m	struct:database	typeref:typename:char[]
next	modules/include/fifo.h	/^	struct container *next;$/;"	m	struct:container	typeref:struct:container *
port	config/config.json	/^	"port":	8080,$/;"	n
serv_mess_handler	src/server.c	/^int serv_mess_handler(char *message, int fd) {$/;"	f	typeref:typename:int
sf	modules/include/array.h	/^	sf *sf;$/;"	m	struct:array	typeref:typename:sf *
sf	modules/include/fifo.h	/^	sf *sf;$/;"	m	struct:fifo	typeref:typename:sf *
sig_catch	src/server.c	/^static void sig_catch(int signal) {$/;"	f	typeref:typename:void	file:
sigint	src/server.c	/^static int sigint = 0;$/;"	v	typeref:typename:int	file:
size	modules/include/array.h	/^	size_t size;$/;"	m	struct:array	typeref:typename:size_t
size	modules/include/str.h	/^	size_t size;$/;"	m	struct:str	typeref:typename:size_t
sock_accept	src/socket.h	/^int sock_accept(struct pollfd *fds, int max_clients) {$/;"	f	typeref:typename:int
sock_close_poll	src/socket.h	/^void sock_close_poll(struct pollfd *fds, int max_clients) {$/;"	f	typeref:typename:void
sock_connect_to_serv	src/socket.h	/^int sock_connect_to_serv(char *adress, int port, int fd, struct sockaddr_in *sa) {$/;"	f	typeref:typename:int
sock_init_poll	src/socket.h	/^int sock_init_poll(struct pollfd *fds, int port, int max_clients) {$/;"	f	typeref:typename:int
sock_net_new	src/socket.h	/^int sock_net_new(int *fd) {$/;"	f	typeref:typename:int
sock_select	src/socket.h	/^int sock_select(int fd, fd_set *read_set) {$/;"	f	typeref:typename:int
sorted	modules/include/array.h	/^	int sorted;$/;"	m	struct:array	typeref:typename:int
start	modules/include/str.h	/^	char *start;$/;"	m	struct:str	typeref:typename:char *
str	modules/include/str.h	/^typedef struct str {$/;"	s
str	modules/include/str.h	/^} str;$/;"	t	typeref:struct:str
tail	modules/include/fifo.h	/^	container *tail;$/;"	m	struct:fifo	typeref:typename:container *
type	src/database.h	/^	const type *type;$/;"	m	struct:col	typeref:typename:const type *
type	src/database.h	/^typedef enum type {$/;"	g
type	src/database.h	/^} type;$/;"	t	typeref:enum:type
type_to_s	src/database.h	/^const char *type_to_s[] = {$/;"	v	typeref:typename:const char * []
usage	src/usage.h	/^static void usage(int argc, char **argv, char *mess, char *params) {$/;"	f	typeref:typename:void
