!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/mathieu/repos/C/db2/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(CBUILD)	Makefile	/^$(CBUILD):$/;"	t
$(CBUILD)/db.o	Makefile	/^$(CBUILD)\/db.o: $(CSRC)\/db.c $(CSRC)\/db.h .\/Makefile $(DEP_O) $(DEP_H)$/;"	t
$(CBUILD)/libdb.a	Makefile	/^$(CBUILD)\/libdb.a: $(CBUILD)\/db.o$/;"	t
$(TBIN)	Makefile	/^$(TBIN):$/;"	t
$(TBIN)/create	Makefile	/^$(TBIN)\/create: $(CBUILD)\/db.o $(TSRC)\/create.c $(DEP_O)$/;"	t
$(TBIN)/load_save	Makefile	/^$(TBIN)\/load_save: $(CBUILD)\/db.o $(TSRC)\/load_save.c $(DEP_O)$/;"	t
$(TEST)/create	Makefile	/^$(TEST)\/create: $(TBIN)\/create$/;"	t
$(TEST)/load_save	Makefile	/^$(TEST)\/load_save: $(TBIN)\/load_save$/;"	t
$(TLOG)	Makefile	/^$(TLOG):$/;"	t
ARRAY_REALLOC_COEF	core/include/array.h	/^#define ARRAY_REALLOC_COEF /;"	d
CBUILD	Makefile	/^CBUILD=core\/build$/;"	m
CC	Makefile	/^CC=gcc -W -Wall -ansi -pedantic -std=c18 -D_POSIX_C_SOURCE=200809L$/;"	m
CINC	Makefile	/^CINC=core\/include$/;"	m
CLIB	Makefile	/^CLIB=core\/lib$/;"	m
COBJ	Makefile	/^COBJ=core\/obj$/;"	m
CSRC	Makefile	/^CSRC=core\/src$/;"	m
DB_COL_COMMENT_LEN	core/src/db.h	/^#define DB_COL_COMMENT_LEN /;"	d
DB_COL_NAME_LEN	core/src/db.h	/^#define DB_COL_NAME_LEN /;"	d
DB_STR_LEN_ALLOC	core/src/db.h	/^#define DB_STR_LEN_ALLOC /;"	d
DEP_A	Makefile	/^DEP_A=$(CLIB)\/libarray.a $(CLIB)\/libstr.a$/;"	m
DEP_H	Makefile	/^DEP_H=$(CINC)\/array.h $(CINC)\/str.h$/;"	m
DEP_O	Makefile	/^DEP_O=$(COBJ)\/array.o $(COBJ)\/str.o$/;"	m
DOUBLE	core/src/db.h	/^typedef enum db_type { INTEGER=0, DOUBLE, STRING } db_type;$/;"	e	enum:db_type
INTEGER	core/src/db.h	/^typedef enum db_type { INTEGER=0, DOUBLE, STRING } db_type;$/;"	e	enum:db_type
LDFLAGS	Makefile	/^LDFLAGS=-L $(CLIB) -L $(CBUILD) -I $(CINC) -I $(CSRC)$/;"	m
STRING	core/src/db.h	/^typedef enum db_type { INTEGER=0, DOUBLE, STRING } db_type;$/;"	e	enum:db_type
TBIN	Makefile	/^TBIN=$(TEST)\/bin$/;"	m
TEST	Makefile	/^TEST=test$/;"	m
TLOG	Makefile	/^TLOG=$(TEST)\/log$/;"	m
TRES	Makefile	/^TRES=$(TEST)\/ressources$/;"	m
TSRC	Makefile	/^TSRC=$(TEST)\/src$/;"	m
all	Makefile	/^all: dirs builds tests execs$/;"	t
alloc_len	core/include/str.h	/^	size_t alloc_len; \/\/ alloc size is sizeof(char) * (alloc_len + 1)$/;"	m	struct:str	typeref:typename:size_t
array	core/include/array.h	/^typedef struct array {$/;"	s
array	core/include/array.h	/^} array;$/;"	t	typeref:struct:array
builds	Makefile	/^builds: $(CBUILD)\/db.o $(CBUILD)\/libdb.a$/;"	t
clean	Makefile	/^clean: $/;"	t
cmp	core/include/array.h	/^	int (*cmp)(void *, void *);$/;"	m	struct:array	typeref:typename:int (*)(void *,void *)
cols	core/src/db.h	/^	array *cols;	\/\/ array of db_col$/;"	m	struct:db_base	typeref:typename:array *
comment	core/src/db.h	/^	char comment[DB_COL_COMMENT_LEN];$/;"	m	struct:db_col	typeref:typename:char[]
data	core/include/array.h	/^	void **data;$/;"	m	struct:array	typeref:typename:void **
data	core/include/str.h	/^	char *data;$/;"	m	struct:str	typeref:typename:char *
db_base	core/src/db.h	/^typedef struct db_base {$/;"	s
db_base	core/src/db.h	/^} db_base;$/;"	t	typeref:struct:db_base
db_col	core/src/db.h	/^typedef struct db_col {$/;"	s
db_col	core/src/db.h	/^} db_col;$/;"	t	typeref:struct:db_col
db_col_add	core/src/db.c	/^db_base *db_col_add(db_base *db, bool mandatory, int type, char *name, char *comment) {$/;"	f	typeref:typename:db_base *
db_col_adds	core/src/db.c	/^db_base *db_col_adds(db_base *db, char *src) {$/;"	f	typeref:typename:db_base *
db_col_assert_type	core/src/db.c	/^db_col *db_col_assert_type(db_base *db, size_t c, int type) {$/;"	f	typeref:typename:db_col *
db_col_new	core/src/db.c	/^db_col *db_col_new(bool mandatory, int type, char *name, char *comment) {$/;"	f	typeref:typename:db_col *
db_col_print	core/src/db.c	/^void db_col_print(db_base *db, array *line, size_t c, FILE *file) {$/;"	f	typeref:typename:void
db_col_print_as_double	core/src/db.c	/^void db_col_print_as_double(db_base *db, array *line, size_t c, FILE *file) {$/;"	f	typeref:typename:void
db_col_print_as_int	core/src/db.c	/^void db_col_print_as_int(db_base *db, array *line, size_t c, FILE *file) {$/;"	f	typeref:typename:void
db_col_print_as_string	core/src/db.c	/^void db_col_print_as_string(db_base *db, array *line, size_t c, FILE *file) {$/;"	f	typeref:typename:void
db_delete	core/src/db.c	/^void db_delete(db_base *db, size_t l, bool keep_null) {$/;"	f	typeref:typename:void
db_escape_string	core/src/db.c	/^void db_escape_string(char *string) {$/;"	f	typeref:typename:void
db_file_load	core/src/db.c	/^db_base *db_file_load(db_base *db, FILE *file, size_t alloc_s) {$/;"	f	typeref:typename:db_base *
db_file_readline	core/src/db.c	/^char *db_file_readline(FILE *f, size_t alloc, size_t realloc_coef, size_t *n_read) {$/;"	f	typeref:typename:char *
db_free	core/src/db.c	/^void db_free(db_base *db) {$/;"	f	typeref:typename:void
db_get_type	core/src/db.c	/^int db_get_type(db_base *db, size_t c) {$/;"	f	typeref:typename:int
db_insert	core/src/db.c	/^db_base *db_insert(db_base *res, array *line) {$/;"	f	typeref:typename:db_base *
db_line_col_free	core/src/db.c	/^void db_line_col_free(db_base *db, array *line, size_t c) {$/;"	f	typeref:typename:void
db_line_free	core/src/db.c	/^void db_line_free(db_base *db, array *line) {$/;"	f	typeref:typename:void
db_line_get_double	core/src/db.c	/^double db_line_get_double(db_base *db, array *line, size_t c) {$/;"	f	typeref:typename:double
db_line_get_int	core/src/db.c	/^int db_line_get_int(db_base *db, array *line, size_t c) {$/;"	f	typeref:typename:int
db_line_get_string	core/src/db.c	/^char *db_line_get_string(db_base *db, array *line, size_t c) {$/;"	f	typeref:typename:char *
db_line_new	core/src/db.c	/^array *db_line_new(db_base *db) {$/;"	f	typeref:typename:array *
db_line_new_from_s	core/src/db.c	/^array *db_line_new_from_s(db_base *db, char *string, size_t alloc_s, size_t *n_cols) {$/;"	f	typeref:typename:array *
db_line_print	core/src/db.c	/^void db_line_print(db_base *db, array *line, FILE *file) {$/;"	f	typeref:typename:void
db_line_set	core/src/db.c	/^db_base* db_line_set(db_base *db, array *line, size_t c, int type, void *value, size_t alloc) {$/;"	f	typeref:typename:db_base *
db_line_set_null	core/src/db.c	/^db_base* db_line_set_null(db_base *db, array *line, size_t c, int type) {$/;"	f	typeref:typename:db_base *
db_line_write	core/src/db.c	/^void db_line_write(db_base *db, FILE *file, size_t l) {$/;"	f	typeref:typename:void
db_new	core/src/db.c	/^db_base *db_new(size_t a_cols, size_t a_lines) {$/;"	f	typeref:typename:db_base *
db_read_bracket	core/src/db.c	/^int db_read_bracket(char *dest, char *p, int *pos) {$/;"	f	typeref:typename:int
db_remove_nulls	core/src/db.c	/^void db_remove_nulls(db_base *db) {$/;"	f	typeref:typename:void
db_resize	core/src/db.c	/^db_base *db_resize(db_base *db, double coef, double new_coef) {$/;"	f	typeref:typename:db_base *
db_type	core/src/db.h	/^typedef enum db_type { INTEGER=0, DOUBLE, STRING } db_type;$/;"	g
db_type	core/src/db.h	/^typedef enum db_type { INTEGER=0, DOUBLE, STRING } db_type;$/;"	t	typeref:enum:db_type
db_write	core/src/db.c	/^void db_write(db_base *db, FILE *file) {$/;"	f	typeref:typename:void
dirs	Makefile	/^dirs: $(CBUILD) $(TBIN) $(TLOG)$/;"	t
execs	Makefile	/^execs: test\/create test\/load_save result$/;"	t
free	core/include/array.h	/^	void (*free)(void *);$/;"	m	struct:array	typeref:typename:void (*)(void *)
lines	core/src/db.h	/^	array *lines;	\/\/ array of array of void *$/;"	m	struct:db_base	typeref:typename:array *
main	test/src/create.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	test/src/load_save.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
mandatory	core/src/db.h	/^	bool mandatory;$/;"	m	struct:db_col	typeref:typename:bool
n	core/include/array.h	/^	size_t n;$/;"	m	struct:array	typeref:typename:size_t
n	core/include/str.h	/^	size_t n;$/;"	m	struct:str	typeref:typename:size_t
name	core/src/db.h	/^	char name[DB_COL_NAME_LEN];$/;"	m	struct:db_col	typeref:typename:char[]
print	core/include/array.h	/^	void (*print)(void *);$/;"	m	struct:array	typeref:typename:void (*)(void *)
result	Makefile	/^result:$/;"	t
size	core/include/array.h	/^	size_t size;$/;"	m	struct:array	typeref:typename:size_t
str	core/include/str.h	/^typedef struct str {$/;"	s
str	core/include/str.h	/^} str;$/;"	t	typeref:struct:str
tests	Makefile	/^tests:  $(TBIN)\/create $(TBIN)\/load_save$/;"	t
tos	core/include/array.h	/^	void (*tos)(void *);$/;"	m	struct:array	typeref:typename:void (*)(void *)
type	core/src/db.h	/^	int type;$/;"	m	struct:db_col	typeref:typename:int
